{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"INDEX","title":"Home"},{"location":"#index","text":"","title":"INDEX"},{"location":"align/","text":"Align Enum Align enumeration. Properties BASE_LINE Value is equivalent to: QtCore.Qt.AlignBaseline BOTTOM Value is equivalent to: QtCore.Qt.AlignBottom BOTTOM_LEFT Value is equivalent to: QtCore.Qt.AlignBottom | QtCore.Qt.AlignLeft BOTTOM_RIGHT Value is equivalent to: QtCore.Qt.AlignBottom | QtCore.Qt.AlignRight CENTER Value is equivalent to: QtCore.Qt.AlignCenter H_CENTER Value is equivalent to: QtCore.Qt.AlignHCenter JUSTIFY Value is equivalent to: QtCore.Qt.AlignJustify LEFT Value is equivalent to: QtCore.Qt.AlignLeft RIGHT Value is equivalent to: QtCore.Qt.AlignRight TOP Value is equivalent to: QtCore.Qt.AlignTop TOP_LEFT Value is equivalent to: QtCore.Qt.AlignTop | QtCore.Qt.AlignLeft TOP_RIGHT Value is equivalent to: QtCore.Qt.AlignTop | QtCore.Qt.AlignRight V_CENTER Value is equivalent to: QtCore.Qt.AlignVCenter","title":"Align"},{"location":"align/#align","text":"","title":"Align"},{"location":"align/#properties","text":"","title":"Properties"},{"location":"align/#base_line","text":"Value is equivalent to: QtCore.Qt.AlignBaseline","title":"BASE_LINE"},{"location":"align/#bottom","text":"Value is equivalent to: QtCore.Qt.AlignBottom","title":"BOTTOM"},{"location":"align/#bottom_left","text":"Value is equivalent to: QtCore.Qt.AlignBottom | QtCore.Qt.AlignLeft","title":"BOTTOM_LEFT"},{"location":"align/#bottom_right","text":"Value is equivalent to: QtCore.Qt.AlignBottom | QtCore.Qt.AlignRight","title":"BOTTOM_RIGHT"},{"location":"align/#center","text":"Value is equivalent to: QtCore.Qt.AlignCenter","title":"CENTER"},{"location":"align/#h_center","text":"Value is equivalent to: QtCore.Qt.AlignHCenter","title":"H_CENTER"},{"location":"align/#justify","text":"Value is equivalent to: QtCore.Qt.AlignJustify","title":"JUSTIFY"},{"location":"align/#left","text":"Value is equivalent to: QtCore.Qt.AlignLeft","title":"LEFT"},{"location":"align/#right","text":"Value is equivalent to: QtCore.Qt.AlignRight","title":"RIGHT"},{"location":"align/#top","text":"Value is equivalent to: QtCore.Qt.AlignTop","title":"TOP"},{"location":"align/#top_left","text":"Value is equivalent to: QtCore.Qt.AlignTop | QtCore.Qt.AlignLeft","title":"TOP_LEFT"},{"location":"align/#top_right","text":"Value is equivalent to: QtCore.Qt.AlignTop | QtCore.Qt.AlignRight","title":"TOP_RIGHT"},{"location":"align/#v_center","text":"Value is equivalent to: QtCore.Qt.AlignVCenter","title":"V_CENTER"},{"location":"application/","text":"Application Class Inherits from: object Application manager. Configures parameters and events external to the application. __init__(self, *args, **kwargs) -> None: Class constructor. Properties frame QtWidgets Application frame. That is, the main application window. icon str Frame icon path string. Application Icon. frame_id list Frame identity list. List containing app identity information. The first item is the main file, file , followed by an ID Example: [ file , 'app_id', 'App Name'] ID name must be 3 characters or more, and can only contain lowercase letters, numbers or underscores '_', such as: [ file , 'app_4_me', 'App 4 me' ] When set the list, all items are optional, but the order is mandatory.","title":"Application"},{"location":"application/#application","text":"","title":"Application"},{"location":"application/#properties","text":"","title":"Properties"},{"location":"application/#frame","text":"QtWidgets Application frame. That is, the main application window.","title":"frame"},{"location":"application/#icon","text":"str Frame icon path string. Application Icon.","title":"icon"},{"location":"application/#frame_id","text":"list Frame identity list. List containing app identity information. The first item is the main file, file , followed by an ID Example: [ file , 'app_id', 'App Name'] ID name must be 3 characters or more, and can only contain lowercase letters, numbers or underscores '_', such as: [ file , 'app_4_me', 'App 4 me' ] When set the list, all items are optional, but the order is mandatory.","title":"frame_id"},{"location":"box/","text":"Box Class Inherits from: object Box layout __init__( self, orientation: Orientation = Orientation.VERTICAL, *args, **kwargs) -> None: Class constructor. By default the Box orientation is vertical. Use the horizontal parameter to change it. :param orientation: Changes the orientation of the Box to horizontal Properties align Align Align enum. Sets the Box alignment. margin tuple Box Margins spacing int The space between widgets inside the box. This property takes precedence over the margins of the widgets that are added (add_widgets), so if the Box is vertical, then only the side margins of the widgets will be respected. The Box does not activate the spacing with a single isolated widget. _main_parent Widget | Box Main frame of the application. Use only to access properties and methods of the Main Frame, defining a new frame will break the application. _obj QtWidgets Direct access to Qt classes. Warning: Direct access is discouraged and may break the project. This access is considered a hacking for complex Qt implementations, and should only be used for testing and analysis purposes. Methods add add(self, item: Widget | Box, index: int = -1) -> Widget | Box: Inserts a Widget or a Box. Returns the reference to the added item. :param item: It can be a Widget (Widget, Label, Button...) or a Box. :param index: Index number where the item should be added (Default is -1) items items(self) -> list: List with added widgets. remove remove(self, item: Widget | Box) -> None: Removes a Widget or a Box. This only removes the widget, but does not delete it. The variable referring to it still works and can be added again later. To completely delete the widget from the variable, use the 'delete()' method. :param item: A Widget (Widget, Label, Button...) or a Box. signal signal(self, event: Event) -> Signal: Event Signals. Signals are connections to events. When an event such as a mouse click (Event.MOUSE_BUTTON_PRESS) or other event occurs, a signal is sent. The signal can be assigned a function to be executed when the signal is sent. Use the 'events_available_for_signal()' method to see all available events. :param event: Event enumeration (Enum) corresponding to the requested event, such as Event.HOVER_ENTER. See: events_available_for_signal().","title":"Box"},{"location":"box/#box","text":"","title":"Box"},{"location":"box/#properties","text":"","title":"Properties"},{"location":"box/#align","text":"Align Align enum. Sets the Box alignment.","title":"align"},{"location":"box/#margin","text":"tuple Box Margins","title":"margin"},{"location":"box/#spacing","text":"int The space between widgets inside the box. This property takes precedence over the margins of the widgets that are added (add_widgets), so if the Box is vertical, then only the side margins of the widgets will be respected. The Box does not activate the spacing with a single isolated widget.","title":"spacing"},{"location":"box/#_main_parent","text":"Widget | Box Main frame of the application. Use only to access properties and methods of the Main Frame, defining a new frame will break the application.","title":"_main_parent"},{"location":"box/#_obj","text":"QtWidgets Direct access to Qt classes. Warning: Direct access is discouraged and may break the project. This access is considered a hacking for complex Qt implementations, and should only be used for testing and analysis purposes.","title":"_obj"},{"location":"box/#methods","text":"","title":"Methods"},{"location":"box/#add","text":"add(self, item: Widget | Box, index: int = -1) -> Widget | Box: Inserts a Widget or a Box. Returns the reference to the added item. :param item: It can be a Widget (Widget, Label, Button...) or a Box. :param index: Index number where the item should be added (Default is -1)","title":"add"},{"location":"box/#items","text":"items(self) -> list: List with added widgets.","title":"items"},{"location":"box/#remove","text":"remove(self, item: Widget | Box) -> None: Removes a Widget or a Box. This only removes the widget, but does not delete it. The variable referring to it still works and can be added again later. To completely delete the widget from the variable, use the 'delete()' method. :param item: A Widget (Widget, Label, Button...) or a Box.","title":"remove"},{"location":"box/#signal","text":"signal(self, event: Event) -> Signal: Event Signals. Signals are connections to events. When an event such as a mouse click (Event.MOUSE_BUTTON_PRESS) or other event occurs, a signal is sent. The signal can be assigned a function to be executed when the signal is sent. Use the 'events_available_for_signal()' method to see all available events. :param event: Event enumeration (Enum) corresponding to the requested event, such as Event.HOVER_ENTER. See: events_available_for_signal().","title":"signal"},{"location":"button/","text":"Button Class Inherits from: Widget Button Widget. __init__( self, text: str = None, icon: str = None, orientation: Orientation = Orientation.HORIZONTAL, *args, **kwargs) -> None: Class constructor. The icon is rendered from the path of a passed file, or from the name of an icon in the current operating system, such as Properties selectable bool If it is selectable. Whether the widget is selectable as a toggle button. selected bool If Widget is selected. Only works if the 'selectable' property is True. Use True or False to select or deselect the widget. text str Button text. Pass a new string to update the text.","title":"Button"},{"location":"button/#button","text":"","title":"Button"},{"location":"button/#properties","text":"","title":"Properties"},{"location":"button/#selectable","text":"bool If it is selectable. Whether the widget is selectable as a toggle button.","title":"selectable"},{"location":"button/#selected","text":"bool If Widget is selected. Only works if the 'selectable' property is True. Use True or False to select or deselect the widget.","title":"selected"},{"location":"button/#text","text":"str Button text. Pass a new string to update the text.","title":"text"},{"location":"checkbutton/","text":"CheckButton Class Inherits from: Widget Check Button Widget. __init__( self, text: str = None, value: any = None, selected: bool = False, orientation: Orientation = Orientation.HORIZONTAL, *args, **kwargs) -> None: Class constructor. :param text: CheckButton text label. :param selected: True to start already selected. :param value: Value of any type to capture as an identifier. Properties text str Button text. Pass a new string to update the text. selected bool If Widget is selected. Use True or False to select or deselect the widget. value any Button value. Pass a new value to update.","title":"CheckButton"},{"location":"checkbutton/#checkbutton","text":"","title":"CheckButton"},{"location":"checkbutton/#properties","text":"","title":"Properties"},{"location":"checkbutton/#text","text":"str Button text. Pass a new string to update the text.","title":"text"},{"location":"checkbutton/#selected","text":"bool If Widget is selected. Use True or False to select or deselect the widget.","title":"selected"},{"location":"checkbutton/#value","text":"any Button value. Pass a new value to update.","title":"value"},{"location":"checkgroup/","text":"CheckGroup Class Inherits from: Widget Check Buttons Group Widget. __init__(self, buttons: list, *args, **kwargs) -> None: Class constructor. :param buttons: List with all CheckButton's configured to display. Properties buttons list List with all CheckButton's configured to display.","title":"CheckGroup"},{"location":"checkgroup/#checkgroup","text":"","title":"CheckGroup"},{"location":"checkgroup/#properties","text":"","title":"Properties"},{"location":"checkgroup/#buttons","text":"list List with all CheckButton's configured to display.","title":"buttons"},{"location":"cursor/","text":"Cursor Class Inherits from: object Mouse cursor position. __init__(self) -> None: Class constructor. Methods position position(self) -> tuple: Tuple with mouse cursor position. x x(self) -> int: X mouse cursor position. y y(self) -> int: Y mouse cursor position.","title":"Cursor"},{"location":"cursor/#cursor","text":"","title":"Cursor"},{"location":"cursor/#methods","text":"","title":"Methods"},{"location":"cursor/#position","text":"position(self) -> tuple: Tuple with mouse cursor position.","title":"position"},{"location":"cursor/#x","text":"x(self) -> int: X mouse cursor position.","title":"x"},{"location":"cursor/#y","text":"y(self) -> int: Y mouse cursor position.","title":"y"},{"location":"event/","text":"Event Enum Event enumeration. Properties NONE Value is equivalent to: 'NONE' ALIGNMENT Value is equivalent to: 'ALIGNMENT' CLOSE Value is equivalent to: 'CLOSE' DELETE Value is equivalent to: 'DELETE' DRAG Value is equivalent to: 'DRAG' DROP Value is equivalent to: 'DROP' ENABLED Value is equivalent to: 'ENABLED' FOCUS_IN Value is equivalent to: 'FOCUS_IN' FOCUS_OUT Value is equivalent to: 'FOCUS_OUT' INSERT Value is equivalent to: 'INSERT' MAIN_PARENT Value is equivalent to: 'MAIN_PARENT' MOUSE_DOUBLE_PRESS Value is equivalent to: 'MOUSE_DOUBLE_PRESS' MOUSE_HOVER_ENTER Value is equivalent to: 'MOUSE_HOVER_ENTER' MOUSE_HOVER_LEAVE Value is equivalent to: 'MOUSE_HOVER_LEAVE' MOUSE_HOVER_MOVE Value is equivalent to: 'MOUSE_HOVER_MOVE' MOUSE_PRESS Value is equivalent to: 'MOUSE_PRESS' MOUSE_RELEASE Value is equivalent to: 'MOUSE_RELEASE' MOUSE_RIGHT_PRESS Value is equivalent to: 'MOUSE_RIGHT_PRESS' MOUSE_WHEEL Value is equivalent to: 'MOUSE_WHEEL' REMOVE Value is equivalent to: 'REMOVE' SIZE Value is equivalent to: 'SIZE' STATE Value is equivalent to: 'STATE' STYLE Value is equivalent to: 'STYLE' STYLE_CLASS Value is equivalent to: 'STYLE_CLASS' STYLE_ID Value is equivalent to: 'STYLE_ID' TITLE Value is equivalent to: 'TITLE'","title":"Event"},{"location":"event/#event","text":"","title":"Event"},{"location":"event/#properties","text":"","title":"Properties"},{"location":"event/#none","text":"Value is equivalent to: 'NONE'","title":"NONE"},{"location":"event/#alignment","text":"Value is equivalent to: 'ALIGNMENT'","title":"ALIGNMENT"},{"location":"event/#close","text":"Value is equivalent to: 'CLOSE'","title":"CLOSE"},{"location":"event/#delete","text":"Value is equivalent to: 'DELETE'","title":"DELETE"},{"location":"event/#drag","text":"Value is equivalent to: 'DRAG'","title":"DRAG"},{"location":"event/#drop","text":"Value is equivalent to: 'DROP'","title":"DROP"},{"location":"event/#enabled","text":"Value is equivalent to: 'ENABLED'","title":"ENABLED"},{"location":"event/#focus_in","text":"Value is equivalent to: 'FOCUS_IN'","title":"FOCUS_IN"},{"location":"event/#focus_out","text":"Value is equivalent to: 'FOCUS_OUT'","title":"FOCUS_OUT"},{"location":"event/#insert","text":"Value is equivalent to: 'INSERT'","title":"INSERT"},{"location":"event/#main_parent","text":"Value is equivalent to: 'MAIN_PARENT'","title":"MAIN_PARENT"},{"location":"event/#mouse_double_press","text":"Value is equivalent to: 'MOUSE_DOUBLE_PRESS'","title":"MOUSE_DOUBLE_PRESS"},{"location":"event/#mouse_hover_enter","text":"Value is equivalent to: 'MOUSE_HOVER_ENTER'","title":"MOUSE_HOVER_ENTER"},{"location":"event/#mouse_hover_leave","text":"Value is equivalent to: 'MOUSE_HOVER_LEAVE'","title":"MOUSE_HOVER_LEAVE"},{"location":"event/#mouse_hover_move","text":"Value is equivalent to: 'MOUSE_HOVER_MOVE'","title":"MOUSE_HOVER_MOVE"},{"location":"event/#mouse_press","text":"Value is equivalent to: 'MOUSE_PRESS'","title":"MOUSE_PRESS"},{"location":"event/#mouse_release","text":"Value is equivalent to: 'MOUSE_RELEASE'","title":"MOUSE_RELEASE"},{"location":"event/#mouse_right_press","text":"Value is equivalent to: 'MOUSE_RIGHT_PRESS'","title":"MOUSE_RIGHT_PRESS"},{"location":"event/#mouse_wheel","text":"Value is equivalent to: 'MOUSE_WHEEL'","title":"MOUSE_WHEEL"},{"location":"event/#remove","text":"Value is equivalent to: 'REMOVE'","title":"REMOVE"},{"location":"event/#size","text":"Value is equivalent to: 'SIZE'","title":"SIZE"},{"location":"event/#state","text":"Value is equivalent to: 'STATE'","title":"STATE"},{"location":"event/#style","text":"Value is equivalent to: 'STYLE'","title":"STYLE"},{"location":"event/#style_class","text":"Value is equivalent to: 'STYLE_CLASS'","title":"STYLE_CLASS"},{"location":"event/#style_id","text":"Value is equivalent to: 'STYLE_ID'","title":"STYLE_ID"},{"location":"event/#title","text":"Value is equivalent to: 'TITLE'","title":"TITLE"},{"location":"flag/","text":"Flag Enum Flag enumeration. Properties POPUP Value is equivalent to: QtCore.Qt.Popup","title":"Flag"},{"location":"flag/#flag","text":"","title":"Flag"},{"location":"flag/#properties","text":"","title":"Properties"},{"location":"flag/#popup","text":"Value is equivalent to: QtCore.Qt.Popup","title":"POPUP"},{"location":"frame/","text":"Frame Class Inherits from: object Main frame. That is, the main application window. __init__( self, main_parent = None, orientation: Orientation = Orientation.VERTICAL, *args, **kwargs) -> None: Class constructor. Properties align Align Align enum. Sets the alignment of the Box. flag list Frame flags. They are used to configure the native behavior of the Frame. For example, the POPUP flag configures that the frame can appear on the indicated position on the X and Y axes, and also that the Frame closes by itself. height int Returns the height of the Frame. Pass a new integer value to update the height. icon Icon Frame icon. Application Icon. max_height int Returns the Frame maximum height. Pass a new integer value to update the maximum height the Frame can have. max_width int Returns the Frame maximum width. Pass a new integer value to update the maximum width the Frame can have. min_height int Returns the Frame minimum height. Pass a new integer value to update the minimum height the Frame can have. min_width int Returns the Frame minimum width. Pass a new integer value to update the minimum width the Frame can have. spacing int The space between widgets inside the Frame box. This property takes precedence over the margins of the widgets that are added (add_widgets), so if the Box is vertical, then only the side margins of the widgets will be respected. The Box does not activate the spacing with a single isolated widget. style dict Style as dict. Get the style as a dictionary or submit a new dictionary style to update it. width int Returns the Frame width. Pass a new integer value to update the width. _main_parent __ Main frame of the application. Use only to access properties and methods of the Main Frame, defining a new frame will break the application. _obj __ Direct access to Qt classes. Warning: Direct access is discouraged and may break the project. This access is considered a hacking for complex Qt implementations, and should only be used for testing and analysis purposes. Methods events_available_for_signal events_available_for_signal(self) -> str: String with all available events. add add(self, item: Widget | Box, index: int = -1) -> Widget | Box: Inserts a Widget or a Box. Returns the reference to the added item. :param item: It can be a Widget (Widget, Label, Button...) or a Box. :param index: Index number where the item should be added (Default is -1) remove remove(self, item: Widget | Box) -> None: Removes a Widget or a Box. This only removes the widget, but does not delete it. The variable referring to it still works and can be added again later. To completely delete the widget from the variable, use the 'delete()' method. :param item: A Widget (Widget, Label, Button...) or a Box. move move(self, x: int, y: int) -> None: Move the Frame. The X and Y positions are relative to the main parent. :param x: Horizontal position relative to the main parent. :param y: Vertical position relative to the main parent. show show(self) -> None: Renders and displays the Frame. signal signal(self, event: Event) -> Signal: Event Signals. Signals are connections to events. When an event such as a mouse click (Event.MOUSE_PRESS) or other event occurs, a signal is sent. The signal can be assigned a function to be executed when the signal is sent. Use the 'events_available_for_signal()' method to see all available events. :param event: Event enumeration (Enum) corresponding to the requested event, such as Event.HOVER_ENTER. See: events_available_for_signal(). style_from_file style_from_file(self, path: str) -> dict: Convert the contents of a file into a valid dictionary style.","title":"Frame"},{"location":"frame/#frame","text":"","title":"Frame"},{"location":"frame/#properties","text":"","title":"Properties"},{"location":"frame/#align","text":"Align Align enum. Sets the alignment of the Box.","title":"align"},{"location":"frame/#flag","text":"list Frame flags. They are used to configure the native behavior of the Frame. For example, the POPUP flag configures that the frame can appear on the indicated position on the X and Y axes, and also that the Frame closes by itself.","title":"flag"},{"location":"frame/#height","text":"int Returns the height of the Frame. Pass a new integer value to update the height.","title":"height"},{"location":"frame/#icon","text":"Icon Frame icon. Application Icon.","title":"icon"},{"location":"frame/#max_height","text":"int Returns the Frame maximum height. Pass a new integer value to update the maximum height the Frame can have.","title":"max_height"},{"location":"frame/#max_width","text":"int Returns the Frame maximum width. Pass a new integer value to update the maximum width the Frame can have.","title":"max_width"},{"location":"frame/#min_height","text":"int Returns the Frame minimum height. Pass a new integer value to update the minimum height the Frame can have.","title":"min_height"},{"location":"frame/#min_width","text":"int Returns the Frame minimum width. Pass a new integer value to update the minimum width the Frame can have.","title":"min_width"},{"location":"frame/#spacing","text":"int The space between widgets inside the Frame box. This property takes precedence over the margins of the widgets that are added (add_widgets), so if the Box is vertical, then only the side margins of the widgets will be respected. The Box does not activate the spacing with a single isolated widget.","title":"spacing"},{"location":"frame/#style","text":"dict Style as dict. Get the style as a dictionary or submit a new dictionary style to update it.","title":"style"},{"location":"frame/#width","text":"int Returns the Frame width. Pass a new integer value to update the width.","title":"width"},{"location":"frame/#_main_parent","text":"__ Main frame of the application. Use only to access properties and methods of the Main Frame, defining a new frame will break the application.","title":"_main_parent"},{"location":"frame/#_obj","text":"__ Direct access to Qt classes. Warning: Direct access is discouraged and may break the project. This access is considered a hacking for complex Qt implementations, and should only be used for testing and analysis purposes.","title":"_obj"},{"location":"frame/#methods","text":"","title":"Methods"},{"location":"frame/#events_available_for_signal","text":"events_available_for_signal(self) -> str: String with all available events.","title":"events_available_for_signal"},{"location":"frame/#add","text":"add(self, item: Widget | Box, index: int = -1) -> Widget | Box: Inserts a Widget or a Box. Returns the reference to the added item. :param item: It can be a Widget (Widget, Label, Button...) or a Box. :param index: Index number where the item should be added (Default is -1)","title":"add"},{"location":"frame/#remove","text":"remove(self, item: Widget | Box) -> None: Removes a Widget or a Box. This only removes the widget, but does not delete it. The variable referring to it still works and can be added again later. To completely delete the widget from the variable, use the 'delete()' method. :param item: A Widget (Widget, Label, Button...) or a Box.","title":"remove"},{"location":"frame/#move","text":"move(self, x: int, y: int) -> None: Move the Frame. The X and Y positions are relative to the main parent. :param x: Horizontal position relative to the main parent. :param y: Vertical position relative to the main parent.","title":"move"},{"location":"frame/#show","text":"show(self) -> None: Renders and displays the Frame.","title":"show"},{"location":"frame/#signal","text":"signal(self, event: Event) -> Signal: Event Signals. Signals are connections to events. When an event such as a mouse click (Event.MOUSE_PRESS) or other event occurs, a signal is sent. The signal can be assigned a function to be executed when the signal is sent. Use the 'events_available_for_signal()' method to see all available events. :param event: Event enumeration (Enum) corresponding to the requested event, such as Event.HOVER_ENTER. See: events_available_for_signal().","title":"signal"},{"location":"frame/#style_from_file","text":"style_from_file(self, path: str) -> dict: Convert the contents of a file into a valid dictionary style.","title":"style_from_file"},{"location":"icon/","text":"Icon Class Inherits from: object Icon. __init__( self, path: str = 'document-new', fallback_path: str = 'document-new', width: int = 22, height: int = 22, *args, **kwargs) -> None: Class constructor. The icon is rendered from the path of a passed file, or from the name of an icon in the current operating system, such as Properties height int Returns the height of the Icon. Pass a new integer value to update the height. path str Icon path. Pass a new path to update the icon image. width int Returns the Widget width. Pass a new integer value to update the width. _obj __ Direct access to Qt classes. Warning: Direct access is discouraged and may break the project. This access is considered a hacking for complex Qt implementations, and should only be used for testing and analysis purposes.","title":"Icon"},{"location":"icon/#icon","text":"","title":"Icon"},{"location":"icon/#properties","text":"","title":"Properties"},{"location":"icon/#height","text":"int Returns the height of the Icon. Pass a new integer value to update the height.","title":"height"},{"location":"icon/#path","text":"str Icon path. Pass a new path to update the icon image.","title":"path"},{"location":"icon/#width","text":"int Returns the Widget width. Pass a new integer value to update the width.","title":"width"},{"location":"icon/#_obj","text":"__ Direct access to Qt classes. Warning: Direct access is discouraged and may break the project. This access is considered a hacking for complex Qt implementations, and should only be used for testing and analysis purposes.","title":"_obj"},{"location":"image/","text":"Image Class Inherits from: Widget Image Widget. __init__( self, path: str = None, width: int = None, height: int = None, aspect_ratio: bool = True, smooth: bool = False, *args, **kwargs) -> None: Class constructor. The Image is rendered from the path of a passed file. :param path: Image path or Icon() object. :param width: Integer with the value of the image width. :param height: Integer with the value of the image height. :param aspect_ratio: Flattening or stretching the image with width or height values not equivalent to the original image. True will maintain the aspect ratio without distorting or stretching. :param smooth: It improves the appearance of scaled images, but the processing is a little slower. Properties path str Image path. Pass a new path to update the Image.","title":"Image"},{"location":"image/#image","text":"","title":"Image"},{"location":"image/#properties","text":"","title":"Properties"},{"location":"image/#path","text":"str Image path. Pass a new path to update the Image.","title":"path"},{"location":"label/","text":"Label Class Inherits from: Widget Label Widget. __init__(self, text: str = '', *args, **kwargs) -> None: Class constructor. Properties text str Label text. Pass a new string to update the text.","title":"Label"},{"location":"label/#label","text":"","title":"Label"},{"location":"label/#properties","text":"","title":"Properties"},{"location":"label/#text","text":"str Label text. Pass a new string to update the text.","title":"text"},{"location":"mainframe/","text":"MainFrame Class Inherits from: object Main frame. That is, the main application window. __init__( self, orientation: Orientation = Orientation.VERTICAL, *args, **kwargs) -> None: Class constructor. Properties align Align Alignment enum. Sets the alignment of the Box. flag list Frame flags. They are used to configure the native behavior of the Frame. For example, the POPUP flag configures that the frame can appear on the indicated position on the X and Y axes, and also that the Frame closes by itself. height int Returns the height of the Frame. Pass a new integer value to update the height. icon Icon Frame icon. Application Icon. fullscreen bool If the Frame is full screen. Use a boolean value to change the state of the Frame. maximized bool If the Frame is maximized. Use a boolean value to change the state of the Frame. minimized bool If the Frame is minimized. Use a boolean value to change the state of the Frame. max_height int Returns the Frame maximum height. Pass a new integer value to update the maximum height the Frame can have. max_width int Returns the Frame maximum width. Pass a new integer value to update the maximum width the Frame can have. min_height int Returns the Frame minimum height. Pass a new integer value to update the minimum height the Frame can have. min_width int Returns the Frame minimum width. Pass a new integer value to update the minimum width the Frame can have. spacing int The space between widgets inside the Frame box. This property takes precedence over the margins of the widgets that are added (add_widgets), so if the Box is vertical, then only the side margins of the widgets will be respected. The Box does not activate the spacing with a single isolated widget. style dict Style as dict. Get the style as a dictionary or submit a new dictionary style to update it. title str Returns the Frame title. Pass a new integer value to update the title. width int Returns the Frame width. Pass a new integer value to update the width. _obj __ Direct access to Qt classes. Warning: Direct access is discouraged and may break the project. This access is considered a hacking for complex Qt implementations, and should only be used for testing and analysis purposes. Methods events_available_for_signal events_available_for_signal(self) -> str: String with all available events. add add(self, item: Widget | Box, index: int = -1) -> Widget | Box: Inserts a Widget or a Box. Returns the reference to the added item. :param item: It can be a Widget (Widget, Label, Button...) or a Box. :param index: Index number where the item should be added (Default is -1) remove remove(self, item: Widget | Box) -> None: Removes a Widget or a Box. This only removes the widget, but does not delete it. The variable referring to it still works and can be added again later. To completely delete the widget from the variable, use the 'delete()' method. :param item: A Widget (Widget, Label, Button...) or a Box. show show(self) -> None: Show the frame. signal signal(self, event: Event) -> Signal: Event Signals. Signals are connections to events. When an event such as a mouse click (Event.MOUSE_PRESS) or other event occurs, a signal is sent. The signal can be assigned a function to be executed when the signal is sent. Use the 'events_available_for_signal()' method to see all available events. :param event: Event enumeration (Enum) corresponding to the requested event, such as Event.HOVER_ENTER. See: events_available_for_signal(). style_from_file style_from_file(self, path: str) -> dict: Convert the contents of a file into a valid dictionary style.","title":"MainFrame"},{"location":"mainframe/#mainframe","text":"","title":"MainFrame"},{"location":"mainframe/#properties","text":"","title":"Properties"},{"location":"mainframe/#align","text":"Align Alignment enum. Sets the alignment of the Box.","title":"align"},{"location":"mainframe/#flag","text":"list Frame flags. They are used to configure the native behavior of the Frame. For example, the POPUP flag configures that the frame can appear on the indicated position on the X and Y axes, and also that the Frame closes by itself.","title":"flag"},{"location":"mainframe/#height","text":"int Returns the height of the Frame. Pass a new integer value to update the height.","title":"height"},{"location":"mainframe/#icon","text":"Icon Frame icon. Application Icon.","title":"icon"},{"location":"mainframe/#fullscreen","text":"bool If the Frame is full screen. Use a boolean value to change the state of the Frame.","title":"fullscreen"},{"location":"mainframe/#maximized","text":"bool If the Frame is maximized. Use a boolean value to change the state of the Frame.","title":"maximized"},{"location":"mainframe/#minimized","text":"bool If the Frame is minimized. Use a boolean value to change the state of the Frame.","title":"minimized"},{"location":"mainframe/#max_height","text":"int Returns the Frame maximum height. Pass a new integer value to update the maximum height the Frame can have.","title":"max_height"},{"location":"mainframe/#max_width","text":"int Returns the Frame maximum width. Pass a new integer value to update the maximum width the Frame can have.","title":"max_width"},{"location":"mainframe/#min_height","text":"int Returns the Frame minimum height. Pass a new integer value to update the minimum height the Frame can have.","title":"min_height"},{"location":"mainframe/#min_width","text":"int Returns the Frame minimum width. Pass a new integer value to update the minimum width the Frame can have.","title":"min_width"},{"location":"mainframe/#spacing","text":"int The space between widgets inside the Frame box. This property takes precedence over the margins of the widgets that are added (add_widgets), so if the Box is vertical, then only the side margins of the widgets will be respected. The Box does not activate the spacing with a single isolated widget.","title":"spacing"},{"location":"mainframe/#style","text":"dict Style as dict. Get the style as a dictionary or submit a new dictionary style to update it.","title":"style"},{"location":"mainframe/#title","text":"str Returns the Frame title. Pass a new integer value to update the title.","title":"title"},{"location":"mainframe/#width","text":"int Returns the Frame width. Pass a new integer value to update the width.","title":"width"},{"location":"mainframe/#_obj","text":"__ Direct access to Qt classes. Warning: Direct access is discouraged and may break the project. This access is considered a hacking for complex Qt implementations, and should only be used for testing and analysis purposes.","title":"_obj"},{"location":"mainframe/#methods","text":"","title":"Methods"},{"location":"mainframe/#events_available_for_signal","text":"events_available_for_signal(self) -> str: String with all available events.","title":"events_available_for_signal"},{"location":"mainframe/#add","text":"add(self, item: Widget | Box, index: int = -1) -> Widget | Box: Inserts a Widget or a Box. Returns the reference to the added item. :param item: It can be a Widget (Widget, Label, Button...) or a Box. :param index: Index number where the item should be added (Default is -1)","title":"add"},{"location":"mainframe/#remove","text":"remove(self, item: Widget | Box) -> None: Removes a Widget or a Box. This only removes the widget, but does not delete it. The variable referring to it still works and can be added again later. To completely delete the widget from the variable, use the 'delete()' method. :param item: A Widget (Widget, Label, Button...) or a Box.","title":"remove"},{"location":"mainframe/#show","text":"show(self) -> None: Show the frame.","title":"show"},{"location":"mainframe/#signal","text":"signal(self, event: Event) -> Signal: Event Signals. Signals are connections to events. When an event such as a mouse click (Event.MOUSE_PRESS) or other event occurs, a signal is sent. The signal can be assigned a function to be executed when the signal is sent. Use the 'events_available_for_signal()' method to see all available events. :param event: Event enumeration (Enum) corresponding to the requested event, such as Event.HOVER_ENTER. See: events_available_for_signal().","title":"signal"},{"location":"mainframe/#style_from_file","text":"style_from_file(self, path: str) -> dict: Convert the contents of a file into a valid dictionary style.","title":"style_from_file"},{"location":"moveframe/","text":"MoveFrame Class Inherits from: Widget Move Frame Widget. __init__(self, *args, **kwargs) -> None: Class constructor.","title":"MoveFrame"},{"location":"moveframe/#moveframe","text":"","title":"MoveFrame"},{"location":"orientation/","text":"Orientation Enum Orientation enumeration. Properties VERTICAL Value is equivalent to: 0 HORIZONTAL Value is equivalent to: 1","title":"Orientation"},{"location":"orientation/#orientation","text":"","title":"Orientation"},{"location":"orientation/#properties","text":"","title":"Properties"},{"location":"orientation/#vertical","text":"Value is equivalent to: 0","title":"VERTICAL"},{"location":"orientation/#horizontal","text":"Value is equivalent to: 1","title":"HORIZONTAL"},{"location":"radiobutton/","text":"RadioButton Class Inherits from: Widget Radio Button Widget. __init__( self, text: str = None, value: any = None, selected: bool = False, orientation: Orientation = Orientation.HORIZONTAL, *args, **kwargs) -> None: Class constructor. :param text: RadioButton text label. :param value: Value of any type to capture as an identifier. :param selected: True to start already selected. Properties text str Button text. Pass a new string to update the text. selected bool If Widget is selected. Use True or False to select or deselect the widget. value any Button value. Pass a new value to update.","title":"RadioButton"},{"location":"radiobutton/#radiobutton","text":"","title":"RadioButton"},{"location":"radiobutton/#properties","text":"","title":"Properties"},{"location":"radiobutton/#text","text":"str Button text. Pass a new string to update the text.","title":"text"},{"location":"radiobutton/#selected","text":"bool If Widget is selected. Use True or False to select or deselect the widget.","title":"selected"},{"location":"radiobutton/#value","text":"any Button value. Pass a new value to update.","title":"value"},{"location":"radiogroup/","text":"RadioGroup Class Inherits from: Widget Radio Buttons Group Widget. __init__(self, buttons: list, *args, **kwargs) -> None: Class constructor. :param buttons: List with all RadioButton's configured to display. Properties buttons list List with all RadioButton's configured to display.","title":"RadioGroup"},{"location":"radiogroup/#radiogroup","text":"","title":"RadioGroup"},{"location":"radiogroup/#properties","text":"","title":"Properties"},{"location":"radiogroup/#buttons","text":"list List with all RadioButton's configured to display.","title":"buttons"},{"location":"signal/","text":"Signal Class Inherits from: object Signal object. __init__(self): Class constructor. Signals an event: MyObj: obj_signal = Signal() Properties _callback callable Methods value value(self, value: any) -> None: Signal value. my_signal = self.obj_signal signal_value = my_signal.value self.my_signal.connect(lambda: print(signal_value)) disconnect disconnect(self, callback: callable = None) -> None: Function to be disconnected. my_obj.obj_signal.disconnect(self.my_function) :param callback: Function to be disconnect. emit emit(self) -> None: Send this signal. This method should be executed when you need to send the signal.","title":"Signal"},{"location":"signal/#signal","text":"","title":"Signal"},{"location":"signal/#properties","text":"","title":"Properties"},{"location":"signal/#_callback","text":"callable","title":"_callback"},{"location":"signal/#methods","text":"","title":"Methods"},{"location":"signal/#value","text":"value(self, value: any) -> None: Signal value. my_signal = self.obj_signal signal_value = my_signal.value self.my_signal.connect(lambda: print(signal_value))","title":"value"},{"location":"signal/#disconnect","text":"disconnect(self, callback: callable = None) -> None: Function to be disconnected. my_obj.obj_signal.disconnect(self.my_function) :param callback: Function to be disconnect.","title":"disconnect"},{"location":"signal/#emit","text":"emit(self) -> None: Send this signal. This method should be executed when you need to send the signal.","title":"emit"},{"location":"svgwidget/","text":"SvgWidget Class Inherits from: Widget Svg Widget. __init__(self, path: str = None, *args, **kwargs) -> None: Class constructor. Properties state str ...","title":"SvgWidget"},{"location":"svgwidget/#svgwidget","text":"","title":"SvgWidget"},{"location":"svgwidget/#properties","text":"","title":"Properties"},{"location":"svgwidget/#state","text":"str ...","title":"state"},{"location":"switchbutton/","text":"SwitchButton Class Inherits from: Widget Switch Button Widget. __init__( self, text: str = None, value: any = None, selected: bool = False, orientation: Orientation = Orientation.HORIZONTAL, *args, **kwargs) -> None: Class constructor. :param text: SwitchButton text label. :param selected: True to start already selected. :param value: Value of any type to capture as an identifier. Properties text str Button text. Pass a new string to update the text. selected bool If Widget is selected. Use True or False to select or deselect the widget. value any Button value. Pass a new value to update.","title":"SwitchButton"},{"location":"switchbutton/#switchbutton","text":"","title":"SwitchButton"},{"location":"switchbutton/#properties","text":"","title":"Properties"},{"location":"switchbutton/#text","text":"str Button text. Pass a new string to update the text.","title":"text"},{"location":"switchbutton/#selected","text":"bool If Widget is selected. Use True or False to select or deselect the widget.","title":"selected"},{"location":"switchbutton/#value","text":"any Button value. Pass a new value to update.","title":"value"},{"location":"switchgroup/","text":"SwitchGroup Class Inherits from: CheckGroup Switch Buttons Group Widget. __init__(self, *args, **kwargs) -> None:","title":"SwitchGroup"},{"location":"switchgroup/#switchgroup","text":"","title":"SwitchGroup"},{"location":"toolbutton/","text":"ToolButton Class Inherits from: Widget Tool Button Widget. __init__(self, icon: str | Icon, *args, **kwargs) -> None: Class constructor. Properties selectable bool ... selected bool ...","title":"ToolButton"},{"location":"toolbutton/#toolbutton","text":"","title":"ToolButton"},{"location":"toolbutton/#properties","text":"","title":"Properties"},{"location":"toolbutton/#selectable","text":"bool ...","title":"selectable"},{"location":"toolbutton/#selected","text":"bool ...","title":"selected"},{"location":"widget/","text":"Widget Class Inherits from: object Widget. Tip: The base widget is an empty object, with no margins or spacing, and is visually imperceptible, as it does not take up a single pixel. Adding height, width or background color will help to make it noticeable. __init__( self, main_parent = None, orientation: Orientation = Orientation.VERTICAL, *args, **kwargs) -> None: Class constructor. :main_parent: MainFrame object Properties accent str ... align Align Align enum. Sets the Box alignment. enabled bool Enables the Widget. When False, the Widget is inactive both in appearance and in the Event.MOUSE_PRESS and Event.MOUSE_RELEASE events. height int Returns the height of the Widget. Pass a new integer value to update the height. margin tuple Utility to set widget margins using a simple int tuple. Will affect all widget states, such as pressed, hover and inactive. Note: The Box's 'spacing' property takes precedence over the widget's margins, unless the widget is the only one isolated within a Box. If the Box is vertical, then only the side margins of the widgets will be respected. The Box does not activate the spacing with a single isolated widget. max_height int Returns the Widget maximum height. Pass a new integer value to update the maximum height the Widget can have. max_width int Returns the Widget maximum width. Pass a new integer value to update the maximum width the Widget can have. min_height int Returns the Widget minimum height. Pass a new integer value to update the minimum height the Widget can have. min_width int Returns the Widget minimum width. Pass a new integer value to update the minimum width the Widget can have. spacing int The space between widgets inside the Widget box. This property takes precedence over the margins of the widgets that are added (add_widgets), so if the Box is vertical, then only the side margins of the widgets will be respected. The Box does not activate the spacing with a single isolated widget. state str ... style str Style as dict. The style is a 'dict' that goes back to the style INI file. The contents of this file are something like: [Widget] background=rgba(200, 0, 0, 1.00) margin=5px 5px 5px 5px So the dictionary will be: {'[Widget]': { 'background': 'rgba(200, 0, 0, 1.00)', 'margin': '5px 5px 5px 5px',} } Simply changing the existing dictionary does not update the style, the property actually needs to be updated with a new dictionary: new_style = my_widget.style new_style['[Widget]']['margin'] = '05px 05px 05px 05px' my_widget.style = new_style Shortened: my_widget.style['[Widget]']['margin'] = '05px 05px 05px 05px' my_widget.style = my_widget.style Note: The Box's 'spacing' property takes precedence over the widget's margins, unless the widget is the only one isolated within a Box. style_class str | None Changes the style to that of the desired class. Use appropriate generic classes, such as 'Success', 'Danger', 'Warning' and 'Accent'. my_button.style_class = 'Danger' Use None to reset. The style class will only be changed if the Widget already contains a _main_parent (The 'add' method automatically sets the _main_parent). style_id str Style ID. An ID allows you to define a unique style that does not distort parent objects of the same type that inherit from the class. Send a string with a unique ID to set the style for this Widget only. visible bool Widget Visibility. Qt has minor issues when calculating pixels to render areas that are repeatedly hidden and visible, so clearly define the sizes and spacing to avoid minor visual discomforts. width int Returns the Widget width. Pass a new integer value to update the width. _main_parent __ Main frame of the application. Use only to access properties and methods of the Main Frame, defining a new frame will break the application. _obj __ Direct access to Qt classes. Warning: Direct access is discouraged and may break the project. This access is considered a hacking for complex Qt implementations, and should only be used for testing and analysis purposes. Methods events_available_for_signal events_available_for_signal(self) -> str: String with all available events. add add(self, item: Widget | Box, index: int = -1) -> Widget | Box: Inserts a Widget or a Box. Returns the reference to the added item. :param item: It can be a Widget (Widget, Label, Button...) or a Box. :param index: Index number where the item should be added (Default is -1) items items(self) -> list: List with added widgets. remove remove(self, item: Widget | Box) -> None: Removes a Widget or a Box. This only removes the widget, but does not delete it. The variable referring to it still works and can be added again later. To completely delete the widget from the variable, use the 'delete()' method. :param item: A Widget (Widget, Label, Button...) or a Box. move move(self, x: int, y: int) -> None: Move the Widget. The X and Y positions are relative to the main parent. :param x: Horizontal position relative to the main parent. :param y: Vertical position relative to the main parent. signal signal(self, event: Event) -> Signal: Event Signals. Signals are connections to events. When an event such as a mouse click (Event.MOUSE_PRESS) or other event occurs, a signal is sent. The signal can be assigned a function to be executed when the signal is sent. Use the 'events_available_for_signal()' method to see all available events. :param event: Event enumeration (Enum) corresponding to the requested event, such as Event.HOVER_ENTER. See: events_available_for_signal().","title":"Widget"},{"location":"widget/#widget","text":"","title":"Widget"},{"location":"widget/#properties","text":"","title":"Properties"},{"location":"widget/#accent","text":"str ...","title":"accent"},{"location":"widget/#align","text":"Align Align enum. Sets the Box alignment.","title":"align"},{"location":"widget/#enabled","text":"bool Enables the Widget. When False, the Widget is inactive both in appearance and in the Event.MOUSE_PRESS and Event.MOUSE_RELEASE events.","title":"enabled"},{"location":"widget/#height","text":"int Returns the height of the Widget. Pass a new integer value to update the height.","title":"height"},{"location":"widget/#margin","text":"tuple Utility to set widget margins using a simple int tuple. Will affect all widget states, such as pressed, hover and inactive. Note: The Box's 'spacing' property takes precedence over the widget's margins, unless the widget is the only one isolated within a Box. If the Box is vertical, then only the side margins of the widgets will be respected. The Box does not activate the spacing with a single isolated widget.","title":"margin"},{"location":"widget/#max_height","text":"int Returns the Widget maximum height. Pass a new integer value to update the maximum height the Widget can have.","title":"max_height"},{"location":"widget/#max_width","text":"int Returns the Widget maximum width. Pass a new integer value to update the maximum width the Widget can have.","title":"max_width"},{"location":"widget/#min_height","text":"int Returns the Widget minimum height. Pass a new integer value to update the minimum height the Widget can have.","title":"min_height"},{"location":"widget/#min_width","text":"int Returns the Widget minimum width. Pass a new integer value to update the minimum width the Widget can have.","title":"min_width"},{"location":"widget/#spacing","text":"int The space between widgets inside the Widget box. This property takes precedence over the margins of the widgets that are added (add_widgets), so if the Box is vertical, then only the side margins of the widgets will be respected. The Box does not activate the spacing with a single isolated widget.","title":"spacing"},{"location":"widget/#state","text":"str ...","title":"state"},{"location":"widget/#style","text":"str Style as dict. The style is a 'dict' that goes back to the style INI file. The contents of this file are something like: [Widget] background=rgba(200, 0, 0, 1.00) margin=5px 5px 5px 5px So the dictionary will be: {'[Widget]': { 'background': 'rgba(200, 0, 0, 1.00)', 'margin': '5px 5px 5px 5px',} } Simply changing the existing dictionary does not update the style, the property actually needs to be updated with a new dictionary: new_style = my_widget.style new_style['[Widget]']['margin'] = '05px 05px 05px 05px' my_widget.style = new_style Shortened: my_widget.style['[Widget]']['margin'] = '05px 05px 05px 05px' my_widget.style = my_widget.style Note: The Box's 'spacing' property takes precedence over the widget's margins, unless the widget is the only one isolated within a Box.","title":"style"},{"location":"widget/#style_class","text":"str | None Changes the style to that of the desired class. Use appropriate generic classes, such as 'Success', 'Danger', 'Warning' and 'Accent'. my_button.style_class = 'Danger' Use None to reset. The style class will only be changed if the Widget already contains a _main_parent (The 'add' method automatically sets the _main_parent).","title":"style_class"},{"location":"widget/#style_id","text":"str Style ID. An ID allows you to define a unique style that does not distort parent objects of the same type that inherit from the class. Send a string with a unique ID to set the style for this Widget only.","title":"style_id"},{"location":"widget/#visible","text":"bool Widget Visibility. Qt has minor issues when calculating pixels to render areas that are repeatedly hidden and visible, so clearly define the sizes and spacing to avoid minor visual discomforts.","title":"visible"},{"location":"widget/#width","text":"int Returns the Widget width. Pass a new integer value to update the width.","title":"width"},{"location":"widget/#_main_parent","text":"__ Main frame of the application. Use only to access properties and methods of the Main Frame, defining a new frame will break the application.","title":"_main_parent"},{"location":"widget/#_obj","text":"__ Direct access to Qt classes. Warning: Direct access is discouraged and may break the project. This access is considered a hacking for complex Qt implementations, and should only be used for testing and analysis purposes.","title":"_obj"},{"location":"widget/#methods","text":"","title":"Methods"},{"location":"widget/#events_available_for_signal","text":"events_available_for_signal(self) -> str: String with all available events.","title":"events_available_for_signal"},{"location":"widget/#add","text":"add(self, item: Widget | Box, index: int = -1) -> Widget | Box: Inserts a Widget or a Box. Returns the reference to the added item. :param item: It can be a Widget (Widget, Label, Button...) or a Box. :param index: Index number where the item should be added (Default is -1)","title":"add"},{"location":"widget/#items","text":"items(self) -> list: List with added widgets.","title":"items"},{"location":"widget/#remove","text":"remove(self, item: Widget | Box) -> None: Removes a Widget or a Box. This only removes the widget, but does not delete it. The variable referring to it still works and can be added again later. To completely delete the widget from the variable, use the 'delete()' method. :param item: A Widget (Widget, Label, Button...) or a Box.","title":"remove"},{"location":"widget/#move","text":"move(self, x: int, y: int) -> None: Move the Widget. The X and Y positions are relative to the main parent. :param x: Horizontal position relative to the main parent. :param y: Vertical position relative to the main parent.","title":"move"},{"location":"widget/#signal","text":"signal(self, event: Event) -> Signal: Event Signals. Signals are connections to events. When an event such as a mouse click (Event.MOUSE_PRESS) or other event occurs, a signal is sent. The signal can be assigned a function to be executed when the signal is sent. Use the 'events_available_for_signal()' method to see all available events. :param event: Event enumeration (Enum) corresponding to the requested event, such as Event.HOVER_ENTER. See: events_available_for_signal().","title":"signal"}]}