{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"INDEX","title":"Home"},{"location":"#index","text":"","title":"INDEX"},{"location":"align/","text":"class Align Inherits from: Enum Align enumeration.","title":"Align"},{"location":"align/#_1","text":"","title":""},{"location":"align/#class-align","text":"","title":"class Align"},{"location":"application/","text":"class Application Inherits from: object Application manager. Configures parameters and events external to the application. Signature __init__(self, *args, **kwargs) -> None: Class constructor. Properties frame python frame(self) -> QtWidgets: Application frame. That is, the main application window. icon python icon(self) -> str: Frame icon path string. Application Icon. frame_id python frame_id(self) -> list: Frame identity list. List containing app identity information. The first item is the main file, file , followed by an ID Example: [ file , 'app_id', 'App Name'] ID name must be 3 characters or more, and can only contain lowercase letters, numbers or underscores '_', such as: [ file , 'app_4_me', 'App 4 me' ] When set the list, all items are optional, but the order is mandatory.","title":"Application"},{"location":"application/#_1","text":"","title":""},{"location":"application/#class-application","text":"","title":"class Application"},{"location":"application/#signature","text":"__init__(self, *args, **kwargs) -> None: Class constructor.","title":"Signature"},{"location":"application/#properties","text":"","title":"Properties"},{"location":"application/#frame","text":"python frame(self) -> QtWidgets: Application frame. That is, the main application window.","title":"frame"},{"location":"application/#icon","text":"python icon(self) -> str: Frame icon path string. Application Icon.","title":"icon"},{"location":"application/#frame_id","text":"python frame_id(self) -> list: Frame identity list. List containing app identity information. The first item is the main file, file , followed by an ID Example: [ file , 'app_id', 'App Name'] ID name must be 3 characters or more, and can only contain lowercase letters, numbers or underscores '_', such as: [ file , 'app_4_me', 'App 4 me' ] When set the list, all items are optional, but the order is mandatory.","title":"frame_id"},{"location":"box/","text":"class Box Inherits from: object Box layout Signature __init__( self, orientation: Orientation = Orientation.VERTICAL, *args, **kwargs) -> None: Class constructor. By default the Box orientation is vertical. Use the horizontal parameter to change it. :param orientation: Changes the orientation of the Box to horizontal Properties align python align(self) -> Align: Align enum. Sets the Box alignment. margin python margin(self) -> tuple: Box Margins spacing python spacing(self) -> int: The space between widgets inside the box. This property takes precedence over the margins of the widgets that are added (add_widgets), so if the Box is vertical, then only the side margins of the widgets will be respected. The Box does not activate the spacing with a single isolated widget. _main_parent python _main_parent(self) -> Widget | Box: Main frame of the application. Use only to access properties and methods of the Main Frame, defining a new frame will break the application. _obj python _obj(self): Direct access to Qt classes. Warning: Direct access is discouraged and may break the project. This access is considered a hacking for complex Qt implementations, and should only be used for testing and analysis purposes. Methods add python add(self, item: Widget | Box, index: int = -1) -> Widget | Box: Inserts a Widget or a Box. Returns the reference to the added item. :param item: It can be a Widget (Widget, Label, Button...) or a Box. :param index: Index number where the item should be added (Default is -1) items python items(self) -> list: List with added widgets. remove python remove(self, item: Widget | Box) -> None: Removes a Widget or a Box. This only removes the widget, but does not delete it. The variable referring to it still works and can be added again later. To completely delete the widget from the variable, use the 'delete()' method. :param item: A Widget (Widget, Label, Button...) or a Box. signal python signal(self, event: Event) -> Signal: Event Signals. Signals are connections to events. When an event such as a mouse click (Event.MOUSE_BUTTON_PRESS) or other event occurs, a signal is sent. The signal can be assigned a function to be executed when the signal is sent. Use the 'events_available_for_signal()' method to see all available events. :param event: Event enumeration (Enum) corresponding to the requested event, such as Event.HOVER_ENTER. See: events_available_for_signal(). class Widget Inherits from: object Widget. Signature __init__(self, *args, **kwargs) -> None: Class constructor.","title":"Box"},{"location":"box/#_1","text":"","title":""},{"location":"box/#class-box","text":"","title":"class Box"},{"location":"box/#signature","text":"__init__( self, orientation: Orientation = Orientation.VERTICAL, *args, **kwargs) -> None: Class constructor. By default the Box orientation is vertical. Use the horizontal parameter to change it. :param orientation: Changes the orientation of the Box to horizontal","title":"Signature"},{"location":"box/#properties","text":"","title":"Properties"},{"location":"box/#align","text":"python align(self) -> Align: Align enum. Sets the Box alignment.","title":"align"},{"location":"box/#margin","text":"python margin(self) -> tuple: Box Margins","title":"margin"},{"location":"box/#spacing","text":"python spacing(self) -> int: The space between widgets inside the box. This property takes precedence over the margins of the widgets that are added (add_widgets), so if the Box is vertical, then only the side margins of the widgets will be respected. The Box does not activate the spacing with a single isolated widget.","title":"spacing"},{"location":"box/#_main_parent","text":"python _main_parent(self) -> Widget | Box: Main frame of the application. Use only to access properties and methods of the Main Frame, defining a new frame will break the application.","title":"_main_parent"},{"location":"box/#_obj","text":"python _obj(self): Direct access to Qt classes. Warning: Direct access is discouraged and may break the project. This access is considered a hacking for complex Qt implementations, and should only be used for testing and analysis purposes.","title":"_obj"},{"location":"box/#methods","text":"","title":"Methods"},{"location":"box/#add","text":"python add(self, item: Widget | Box, index: int = -1) -> Widget | Box: Inserts a Widget or a Box. Returns the reference to the added item. :param item: It can be a Widget (Widget, Label, Button...) or a Box. :param index: Index number where the item should be added (Default is -1)","title":"add"},{"location":"box/#items","text":"python items(self) -> list: List with added widgets.","title":"items"},{"location":"box/#remove","text":"python remove(self, item: Widget | Box) -> None: Removes a Widget or a Box. This only removes the widget, but does not delete it. The variable referring to it still works and can be added again later. To completely delete the widget from the variable, use the 'delete()' method. :param item: A Widget (Widget, Label, Button...) or a Box.","title":"remove"},{"location":"box/#signal","text":"python signal(self, event: Event) -> Signal: Event Signals. Signals are connections to events. When an event such as a mouse click (Event.MOUSE_BUTTON_PRESS) or other event occurs, a signal is sent. The signal can be assigned a function to be executed when the signal is sent. Use the 'events_available_for_signal()' method to see all available events. :param event: Event enumeration (Enum) corresponding to the requested event, such as Event.HOVER_ENTER. See: events_available_for_signal().","title":"signal"},{"location":"box/#class-widget","text":"","title":"class Widget"},{"location":"box/#signature_1","text":"__init__(self, *args, **kwargs) -> None: Class constructor.","title":"Signature"},{"location":"button/","text":"class Button Inherits from: Widget Button Widget. Signature __init__( self, text: str = None, icon: str = None, orientation: Orientation = Orientation.HORIZONTAL, *args, **kwargs) -> None: Class constructor. The icon is rendered from the path of a passed file, or from the name of an icon in the current operating system, such as Properties selectable python selectable(self) -> bool: If it is selectable. Whether the widget is selectable as a toggle button. selected python selected(self) -> bool: If Widget is selected. Only works if the 'selectable' property is True. Use True or False to select or deselect the widget. text python text(self) -> str: Button text. Pass a new string to update the text.","title":"Button"},{"location":"button/#_1","text":"","title":""},{"location":"button/#class-button","text":"","title":"class Button"},{"location":"button/#signature","text":"__init__( self, text: str = None, icon: str = None, orientation: Orientation = Orientation.HORIZONTAL, *args, **kwargs) -> None: Class constructor. The icon is rendered from the path of a passed file, or from the name of an icon in the current operating system, such as","title":"Signature"},{"location":"button/#properties","text":"","title":"Properties"},{"location":"button/#selectable","text":"python selectable(self) -> bool: If it is selectable. Whether the widget is selectable as a toggle button.","title":"selectable"},{"location":"button/#selected","text":"python selected(self) -> bool: If Widget is selected. Only works if the 'selectable' property is True. Use True or False to select or deselect the widget.","title":"selected"},{"location":"button/#text","text":"python text(self) -> str: Button text. Pass a new string to update the text.","title":"text"},{"location":"checkbutton/","text":"class CheckButton Inherits from: Widget Check Button Widget. Signature __init__( self, text: str = None, value: any = None, selected: bool = False, orientation: Orientation = Orientation.HORIZONTAL, *args, **kwargs) -> None: Class constructor. :param text: CheckButton text label. :param selected: True to start already selected. :param value: Value of any type to capture as an identifier. Properties text python text(self) -> str: Button text. Pass a new string to update the text. selected python selected(self) -> bool: If Widget is selected. Use True or False to select or deselect the widget. value python value(self) -> any: Button value. Pass a new value to update.","title":"CheckButton"},{"location":"checkbutton/#_1","text":"","title":""},{"location":"checkbutton/#class-checkbutton","text":"","title":"class CheckButton"},{"location":"checkbutton/#signature","text":"__init__( self, text: str = None, value: any = None, selected: bool = False, orientation: Orientation = Orientation.HORIZONTAL, *args, **kwargs) -> None: Class constructor. :param text: CheckButton text label. :param selected: True to start already selected. :param value: Value of any type to capture as an identifier.","title":"Signature"},{"location":"checkbutton/#properties","text":"","title":"Properties"},{"location":"checkbutton/#text","text":"python text(self) -> str: Button text. Pass a new string to update the text.","title":"text"},{"location":"checkbutton/#selected","text":"python selected(self) -> bool: If Widget is selected. Use True or False to select or deselect the widget.","title":"selected"},{"location":"checkbutton/#value","text":"python value(self) -> any: Button value. Pass a new value to update.","title":"value"},{"location":"checkgroup/","text":"class CheckGroup Inherits from: Widget Check Buttons Group Widget. Signature __init__(self, buttons: list, *args, **kwargs) -> None: Class constructor. :param buttons: List with all CheckButton's configured to display. Properties buttons python buttons(self) -> list: List with all CheckButton's configured to display.","title":"CheckGroup"},{"location":"checkgroup/#_1","text":"","title":""},{"location":"checkgroup/#class-checkgroup","text":"","title":"class CheckGroup"},{"location":"checkgroup/#signature","text":"__init__(self, buttons: list, *args, **kwargs) -> None: Class constructor. :param buttons: List with all CheckButton's configured to display.","title":"Signature"},{"location":"checkgroup/#properties","text":"","title":"Properties"},{"location":"checkgroup/#buttons","text":"python buttons(self) -> list: List with all CheckButton's configured to display.","title":"buttons"},{"location":"cursor/","text":"class Cursor Inherits from: object Mouse cursor position. Signature __init__(self) -> None: Class constructor. Methods position python position(self) -> tuple: Tuple with mouse cursor position. x python x(self) -> int: X mouse cursor position. y python y(self) -> int: Y mouse cursor position.","title":"Cursor"},{"location":"cursor/#_1","text":"","title":""},{"location":"cursor/#class-cursor","text":"","title":"class Cursor"},{"location":"cursor/#signature","text":"__init__(self) -> None: Class constructor.","title":"Signature"},{"location":"cursor/#methods","text":"","title":"Methods"},{"location":"cursor/#position","text":"python position(self) -> tuple: Tuple with mouse cursor position.","title":"position"},{"location":"cursor/#x","text":"python x(self) -> int: X mouse cursor position.","title":"x"},{"location":"cursor/#y","text":"python y(self) -> int: Y mouse cursor position.","title":"y"},{"location":"event/","text":"class Event Inherits from: Enum Event enumeration.","title":"Event"},{"location":"event/#_1","text":"","title":""},{"location":"event/#class-event","text":"","title":"class Event"},{"location":"flag/","text":"class Flag Inherits from: Enum Flag enumeration.","title":"Flag"},{"location":"flag/#_1","text":"","title":""},{"location":"flag/#class-flag","text":"","title":"class Flag"},{"location":"frame/","text":"class Frame Inherits from: object Main frame. That is, the main application window. Signature __init__( self, main_parent = None, orientation: Orientation = Orientation.VERTICAL, *args, **kwargs) -> None: Class constructor. Properties align python align(self) -> Align: Align enum. Sets the alignment of the Box. flag python flag(self) -> list: Frame flags. They are used to configure the native behavior of the Frame. For example, the POPUP flag configures that the frame can appear on the indicated position on the X and Y axes, and also that the Frame closes by itself. height python height(self) -> int: Returns the height of the Frame. Pass a new integer value to update the height. icon python icon(self) -> Icon: Frame icon. Application Icon. max_height python max_height(self) -> int: Returns the Frame maximum height. Pass a new integer value to update the maximum height the Frame can have. max_width python max_width(self) -> int: Returns the Frame maximum width. Pass a new integer value to update the maximum width the Frame can have. min_height python min_height(self) -> int: Returns the Frame minimum height. Pass a new integer value to update the minimum height the Frame can have. min_width python min_width(self) -> int: Returns the Frame minimum width. Pass a new integer value to update the minimum width the Frame can have. spacing python spacing(self) -> int: The space between widgets inside the Frame box. This property takes precedence over the margins of the widgets that are added (add_widgets), so if the Box is vertical, then only the side margins of the widgets will be respected. The Box does not activate the spacing with a single isolated widget. style python style(self) -> dict: Style as dict. Get the style as a dictionary or submit a new dictionary style to update it. width python width(self) -> int: Returns the Frame width. Pass a new integer value to update the width. _main_parent python _main_parent(self): Main frame of the application. Use only to access properties and methods of the Main Frame, defining a new frame will break the application. _obj python _obj(self): Direct access to Qt classes. Warning: Direct access is discouraged and may break the project. This access is considered a hacking for complex Qt implementations, and should only be used for testing and analysis purposes. Methods events_available_for_signal python events_available_for_signal(self) -> str: String with all available events. add python add(self, item: Widget | Box, index: int = -1) -> Widget | Box: Inserts a Widget or a Box. Returns the reference to the added item. :param item: It can be a Widget (Widget, Label, Button...) or a Box. :param index: Index number where the item should be added (Default is -1) remove python remove(self, item: Widget | Box) -> None: Removes a Widget or a Box. This only removes the widget, but does not delete it. The variable referring to it still works and can be added again later. To completely delete the widget from the variable, use the 'delete()' method. :param item: A Widget (Widget, Label, Button...) or a Box. move python move(self, x: int, y: int) -> None: Move the Frame. The X and Y positions are relative to the main parent. :param x: Horizontal position relative to the main parent. :param y: Vertical position relative to the main parent. show python show(self) -> None: Renders and displays the Frame. signal python signal(self, event: Event) -> Signal: Event Signals. Signals are connections to events. When an event such as a mouse click (Event.MOUSE_PRESS) or other event occurs, a signal is sent. The signal can be assigned a function to be executed when the signal is sent. Use the 'events_available_for_signal()' method to see all available events. :param event: Event enumeration (Enum) corresponding to the requested event, such as Event.HOVER_ENTER. See: events_available_for_signal(). style_from_file python style_from_file(self, path: str) -> dict: Convert the contents of a file into a valid dictionary style.","title":"Frame"},{"location":"frame/#_1","text":"","title":""},{"location":"frame/#class-frame","text":"","title":"class Frame"},{"location":"frame/#signature","text":"__init__( self, main_parent = None, orientation: Orientation = Orientation.VERTICAL, *args, **kwargs) -> None: Class constructor.","title":"Signature"},{"location":"frame/#properties","text":"","title":"Properties"},{"location":"frame/#align","text":"python align(self) -> Align: Align enum. Sets the alignment of the Box.","title":"align"},{"location":"frame/#flag","text":"python flag(self) -> list: Frame flags. They are used to configure the native behavior of the Frame. For example, the POPUP flag configures that the frame can appear on the indicated position on the X and Y axes, and also that the Frame closes by itself.","title":"flag"},{"location":"frame/#height","text":"python height(self) -> int: Returns the height of the Frame. Pass a new integer value to update the height.","title":"height"},{"location":"frame/#icon","text":"python icon(self) -> Icon: Frame icon. Application Icon.","title":"icon"},{"location":"frame/#max_height","text":"python max_height(self) -> int: Returns the Frame maximum height. Pass a new integer value to update the maximum height the Frame can have.","title":"max_height"},{"location":"frame/#max_width","text":"python max_width(self) -> int: Returns the Frame maximum width. Pass a new integer value to update the maximum width the Frame can have.","title":"max_width"},{"location":"frame/#min_height","text":"python min_height(self) -> int: Returns the Frame minimum height. Pass a new integer value to update the minimum height the Frame can have.","title":"min_height"},{"location":"frame/#min_width","text":"python min_width(self) -> int: Returns the Frame minimum width. Pass a new integer value to update the minimum width the Frame can have.","title":"min_width"},{"location":"frame/#spacing","text":"python spacing(self) -> int: The space between widgets inside the Frame box. This property takes precedence over the margins of the widgets that are added (add_widgets), so if the Box is vertical, then only the side margins of the widgets will be respected. The Box does not activate the spacing with a single isolated widget.","title":"spacing"},{"location":"frame/#style","text":"python style(self) -> dict: Style as dict. Get the style as a dictionary or submit a new dictionary style to update it.","title":"style"},{"location":"frame/#width","text":"python width(self) -> int: Returns the Frame width. Pass a new integer value to update the width.","title":"width"},{"location":"frame/#_main_parent","text":"python _main_parent(self): Main frame of the application. Use only to access properties and methods of the Main Frame, defining a new frame will break the application.","title":"_main_parent"},{"location":"frame/#_obj","text":"python _obj(self): Direct access to Qt classes. Warning: Direct access is discouraged and may break the project. This access is considered a hacking for complex Qt implementations, and should only be used for testing and analysis purposes.","title":"_obj"},{"location":"frame/#methods","text":"","title":"Methods"},{"location":"frame/#events_available_for_signal","text":"python events_available_for_signal(self) -> str: String with all available events.","title":"events_available_for_signal"},{"location":"frame/#add","text":"python add(self, item: Widget | Box, index: int = -1) -> Widget | Box: Inserts a Widget or a Box. Returns the reference to the added item. :param item: It can be a Widget (Widget, Label, Button...) or a Box. :param index: Index number where the item should be added (Default is -1)","title":"add"},{"location":"frame/#remove","text":"python remove(self, item: Widget | Box) -> None: Removes a Widget or a Box. This only removes the widget, but does not delete it. The variable referring to it still works and can be added again later. To completely delete the widget from the variable, use the 'delete()' method. :param item: A Widget (Widget, Label, Button...) or a Box.","title":"remove"},{"location":"frame/#move","text":"python move(self, x: int, y: int) -> None: Move the Frame. The X and Y positions are relative to the main parent. :param x: Horizontal position relative to the main parent. :param y: Vertical position relative to the main parent.","title":"move"},{"location":"frame/#show","text":"python show(self) -> None: Renders and displays the Frame.","title":"show"},{"location":"frame/#signal","text":"python signal(self, event: Event) -> Signal: Event Signals. Signals are connections to events. When an event such as a mouse click (Event.MOUSE_PRESS) or other event occurs, a signal is sent. The signal can be assigned a function to be executed when the signal is sent. Use the 'events_available_for_signal()' method to see all available events. :param event: Event enumeration (Enum) corresponding to the requested event, such as Event.HOVER_ENTER. See: events_available_for_signal().","title":"signal"},{"location":"frame/#style_from_file","text":"python style_from_file(self, path: str) -> dict: Convert the contents of a file into a valid dictionary style.","title":"style_from_file"},{"location":"icon/","text":"class Icon Inherits from: object Icon. Signature __init__( self, path: str = 'document-new', fallback_path: str = 'document-new', width: int = 22, height: int = 22, *args, **kwargs) -> None: Class constructor. The icon is rendered from the path of a passed file, or from the name of an icon in the current operating system, such as Properties height python height(self) -> int: Returns the height of the Icon. Pass a new integer value to update the height. path python path(self) -> str: Icon path. Pass a new path to update the icon image. width python width(self) -> int: Returns the Widget width. Pass a new integer value to update the width. _obj python _obj(self): Direct access to Qt classes. Warning: Direct access is discouraged and may break the project. This access is considered a hacking for complex Qt implementations, and should only be used for testing and analysis purposes.","title":"Icon"},{"location":"icon/#_1","text":"","title":""},{"location":"icon/#class-icon","text":"","title":"class Icon"},{"location":"icon/#signature","text":"__init__( self, path: str = 'document-new', fallback_path: str = 'document-new', width: int = 22, height: int = 22, *args, **kwargs) -> None: Class constructor. The icon is rendered from the path of a passed file, or from the name of an icon in the current operating system, such as","title":"Signature"},{"location":"icon/#properties","text":"","title":"Properties"},{"location":"icon/#height","text":"python height(self) -> int: Returns the height of the Icon. Pass a new integer value to update the height.","title":"height"},{"location":"icon/#path","text":"python path(self) -> str: Icon path. Pass a new path to update the icon image.","title":"path"},{"location":"icon/#width","text":"python width(self) -> int: Returns the Widget width. Pass a new integer value to update the width.","title":"width"},{"location":"icon/#_obj","text":"python _obj(self): Direct access to Qt classes. Warning: Direct access is discouraged and may break the project. This access is considered a hacking for complex Qt implementations, and should only be used for testing and analysis purposes.","title":"_obj"},{"location":"image/","text":"class Image Inherits from: Widget Image Widget. Signature __init__( self, path: str = None, width: int = None, height: int = None, aspect_ratio: bool = True, smooth: bool = False, *args, **kwargs) -> None: Class constructor. The Image is rendered from the path of a passed file. :param path: Image path or Icon() object. :param width: Integer with the value of the image width. :param height: Integer with the value of the image height. :param aspect_ratio: Flattening or stretching the image with width or height values not equivalent to the original image. True will maintain the aspect ratio without distorting or stretching. :param smooth: It improves the appearance of scaled images, but the processing is a little slower. Properties path python path(self) -> str: Image path. Pass a new path to update the Image.","title":"Image"},{"location":"image/#_1","text":"","title":""},{"location":"image/#class-image","text":"","title":"class Image"},{"location":"image/#signature","text":"__init__( self, path: str = None, width: int = None, height: int = None, aspect_ratio: bool = True, smooth: bool = False, *args, **kwargs) -> None: Class constructor. The Image is rendered from the path of a passed file. :param path: Image path or Icon() object. :param width: Integer with the value of the image width. :param height: Integer with the value of the image height. :param aspect_ratio: Flattening or stretching the image with width or height values not equivalent to the original image. True will maintain the aspect ratio without distorting or stretching. :param smooth: It improves the appearance of scaled images, but the processing is a little slower.","title":"Signature"},{"location":"image/#properties","text":"","title":"Properties"},{"location":"image/#path","text":"python path(self) -> str: Image path. Pass a new path to update the Image.","title":"path"},{"location":"label/","text":"class Label Inherits from: Widget Label Widget. Signature __init__(self, text: str = '', *args, **kwargs) -> None: Class constructor. Properties text python text(self) -> str: Label text. Pass a new string to update the text.","title":"Label"},{"location":"label/#_1","text":"","title":""},{"location":"label/#class-label","text":"","title":"class Label"},{"location":"label/#signature","text":"__init__(self, text: str = '', *args, **kwargs) -> None: Class constructor.","title":"Signature"},{"location":"label/#properties","text":"","title":"Properties"},{"location":"label/#text","text":"python text(self) -> str: Label text. Pass a new string to update the text.","title":"text"},{"location":"mainframe/","text":"class MainFrame Inherits from: object Main frame. That is, the main application window. Signature __init__( self, orientation: Orientation = Orientation.VERTICAL, *args, **kwargs) -> None: Class constructor. Properties align python align(self) -> Align: Alignment enum. Sets the alignment of the Box. flag python flag(self) -> list: Frame flags. They are used to configure the native behavior of the Frame. For example, the POPUP flag configures that the frame can appear on the indicated position on the X and Y axes, and also that the Frame closes by itself. height python height(self) -> int: Returns the height of the Frame. Pass a new integer value to update the height. icon python icon(self) -> Icon: Frame icon. Application Icon. fullscreen python fullscreen(self) -> bool: If the Frame is full screen. Use a boolean value to change the state of the Frame. maximized python maximized(self) -> bool: If the Frame is maximized. Use a boolean value to change the state of the Frame. minimized python minimized(self) -> bool: If the Frame is minimized. Use a boolean value to change the state of the Frame. max_height python max_height(self) -> int: Returns the Frame maximum height. Pass a new integer value to update the maximum height the Frame can have. max_width python max_width(self) -> int: Returns the Frame maximum width. Pass a new integer value to update the maximum width the Frame can have. min_height python min_height(self) -> int: Returns the Frame minimum height. Pass a new integer value to update the minimum height the Frame can have. min_width python min_width(self) -> int: Returns the Frame minimum width. Pass a new integer value to update the minimum width the Frame can have. spacing python spacing(self) -> int: The space between widgets inside the Frame box. This property takes precedence over the margins of the widgets that are added (add_widgets), so if the Box is vertical, then only the side margins of the widgets will be respected. The Box does not activate the spacing with a single isolated widget. style python style(self) -> dict: Style as dict. Get the style as a dictionary or submit a new dictionary style to update it. title python title(self) -> str: Returns the Frame title. Pass a new integer value to update the title. width python width(self) -> int: Returns the Frame width. Pass a new integer value to update the width. _obj python _obj(self): Direct access to Qt classes. Warning: Direct access is discouraged and may break the project. This access is considered a hacking for complex Qt implementations, and should only be used for testing and analysis purposes. Methods events_available_for_signal python events_available_for_signal(self) -> str: String with all available events. add python add(self, item: Widget | Box, index: int = -1) -> Widget | Box: Inserts a Widget or a Box. Returns the reference to the added item. :param item: It can be a Widget (Widget, Label, Button...) or a Box. :param index: Index number where the item should be added (Default is -1) remove python remove(self, item: Widget | Box) -> None: Removes a Widget or a Box. This only removes the widget, but does not delete it. The variable referring to it still works and can be added again later. To completely delete the widget from the variable, use the 'delete()' method. :param item: A Widget (Widget, Label, Button...) or a Box. show python show(self) -> None: Show the frame. signal python signal(self, event: Event) -> Signal: Event Signals. Signals are connections to events. When an event such as a mouse click (Event.MOUSE_PRESS) or other event occurs, a signal is sent. The signal can be assigned a function to be executed when the signal is sent. Use the 'events_available_for_signal()' method to see all available events. :param event: Event enumeration (Enum) corresponding to the requested event, such as Event.HOVER_ENTER. See: events_available_for_signal(). style_from_file python style_from_file(self, path: str) -> dict: Convert the contents of a file into a valid dictionary style.","title":"MainFrame"},{"location":"mainframe/#_1","text":"","title":""},{"location":"mainframe/#class-mainframe","text":"","title":"class MainFrame"},{"location":"mainframe/#signature","text":"__init__( self, orientation: Orientation = Orientation.VERTICAL, *args, **kwargs) -> None: Class constructor.","title":"Signature"},{"location":"mainframe/#properties","text":"","title":"Properties"},{"location":"mainframe/#align","text":"python align(self) -> Align: Alignment enum. Sets the alignment of the Box.","title":"align"},{"location":"mainframe/#flag","text":"python flag(self) -> list: Frame flags. They are used to configure the native behavior of the Frame. For example, the POPUP flag configures that the frame can appear on the indicated position on the X and Y axes, and also that the Frame closes by itself.","title":"flag"},{"location":"mainframe/#height","text":"python height(self) -> int: Returns the height of the Frame. Pass a new integer value to update the height.","title":"height"},{"location":"mainframe/#icon","text":"python icon(self) -> Icon: Frame icon. Application Icon.","title":"icon"},{"location":"mainframe/#fullscreen","text":"python fullscreen(self) -> bool: If the Frame is full screen. Use a boolean value to change the state of the Frame.","title":"fullscreen"},{"location":"mainframe/#maximized","text":"python maximized(self) -> bool: If the Frame is maximized. Use a boolean value to change the state of the Frame.","title":"maximized"},{"location":"mainframe/#minimized","text":"python minimized(self) -> bool: If the Frame is minimized. Use a boolean value to change the state of the Frame.","title":"minimized"},{"location":"mainframe/#max_height","text":"python max_height(self) -> int: Returns the Frame maximum height. Pass a new integer value to update the maximum height the Frame can have.","title":"max_height"},{"location":"mainframe/#max_width","text":"python max_width(self) -> int: Returns the Frame maximum width. Pass a new integer value to update the maximum width the Frame can have.","title":"max_width"},{"location":"mainframe/#min_height","text":"python min_height(self) -> int: Returns the Frame minimum height. Pass a new integer value to update the minimum height the Frame can have.","title":"min_height"},{"location":"mainframe/#min_width","text":"python min_width(self) -> int: Returns the Frame minimum width. Pass a new integer value to update the minimum width the Frame can have.","title":"min_width"},{"location":"mainframe/#spacing","text":"python spacing(self) -> int: The space between widgets inside the Frame box. This property takes precedence over the margins of the widgets that are added (add_widgets), so if the Box is vertical, then only the side margins of the widgets will be respected. The Box does not activate the spacing with a single isolated widget.","title":"spacing"},{"location":"mainframe/#style","text":"python style(self) -> dict: Style as dict. Get the style as a dictionary or submit a new dictionary style to update it.","title":"style"},{"location":"mainframe/#title","text":"python title(self) -> str: Returns the Frame title. Pass a new integer value to update the title.","title":"title"},{"location":"mainframe/#width","text":"python width(self) -> int: Returns the Frame width. Pass a new integer value to update the width.","title":"width"},{"location":"mainframe/#_obj","text":"python _obj(self): Direct access to Qt classes. Warning: Direct access is discouraged and may break the project. This access is considered a hacking for complex Qt implementations, and should only be used for testing and analysis purposes.","title":"_obj"},{"location":"mainframe/#methods","text":"","title":"Methods"},{"location":"mainframe/#events_available_for_signal","text":"python events_available_for_signal(self) -> str: String with all available events.","title":"events_available_for_signal"},{"location":"mainframe/#add","text":"python add(self, item: Widget | Box, index: int = -1) -> Widget | Box: Inserts a Widget or a Box. Returns the reference to the added item. :param item: It can be a Widget (Widget, Label, Button...) or a Box. :param index: Index number where the item should be added (Default is -1)","title":"add"},{"location":"mainframe/#remove","text":"python remove(self, item: Widget | Box) -> None: Removes a Widget or a Box. This only removes the widget, but does not delete it. The variable referring to it still works and can be added again later. To completely delete the widget from the variable, use the 'delete()' method. :param item: A Widget (Widget, Label, Button...) or a Box.","title":"remove"},{"location":"mainframe/#show","text":"python show(self) -> None: Show the frame.","title":"show"},{"location":"mainframe/#signal","text":"python signal(self, event: Event) -> Signal: Event Signals. Signals are connections to events. When an event such as a mouse click (Event.MOUSE_PRESS) or other event occurs, a signal is sent. The signal can be assigned a function to be executed when the signal is sent. Use the 'events_available_for_signal()' method to see all available events. :param event: Event enumeration (Enum) corresponding to the requested event, such as Event.HOVER_ENTER. See: events_available_for_signal().","title":"signal"},{"location":"mainframe/#style_from_file","text":"python style_from_file(self, path: str) -> dict: Convert the contents of a file into a valid dictionary style.","title":"style_from_file"},{"location":"moveframe/","text":"class MoveFrame Inherits from: Widget Move Frame Widget. Signature __init__(self, *args, **kwargs) -> None: Class constructor.","title":"MoveFrame"},{"location":"moveframe/#_1","text":"","title":""},{"location":"moveframe/#class-moveframe","text":"","title":"class MoveFrame"},{"location":"moveframe/#signature","text":"__init__(self, *args, **kwargs) -> None: Class constructor.","title":"Signature"},{"location":"orientation/","text":"class Orientation Inherits from: Enum Orientation enumeration.","title":"Orientation"},{"location":"orientation/#_1","text":"","title":""},{"location":"orientation/#class-orientation","text":"","title":"class Orientation"},{"location":"radiobutton/","text":"class RadioButton Inherits from: Widget Radio Button Widget. Signature __init__( self, text: str = None, value: any = None, selected: bool = False, orientation: Orientation = Orientation.HORIZONTAL, *args, **kwargs) -> None: Class constructor. :param text: RadioButton text label. :param value: Value of any type to capture as an identifier. :param selected: True to start already selected. Properties text python text(self) -> str: Button text. Pass a new string to update the text. selected python selected(self) -> bool: If Widget is selected. Use True or False to select or deselect the widget. value python value(self) -> any: Button value. Pass a new value to update.","title":"RadioButton"},{"location":"radiobutton/#_1","text":"","title":""},{"location":"radiobutton/#class-radiobutton","text":"","title":"class RadioButton"},{"location":"radiobutton/#signature","text":"__init__( self, text: str = None, value: any = None, selected: bool = False, orientation: Orientation = Orientation.HORIZONTAL, *args, **kwargs) -> None: Class constructor. :param text: RadioButton text label. :param value: Value of any type to capture as an identifier. :param selected: True to start already selected.","title":"Signature"},{"location":"radiobutton/#properties","text":"","title":"Properties"},{"location":"radiobutton/#text","text":"python text(self) -> str: Button text. Pass a new string to update the text.","title":"text"},{"location":"radiobutton/#selected","text":"python selected(self) -> bool: If Widget is selected. Use True or False to select or deselect the widget.","title":"selected"},{"location":"radiobutton/#value","text":"python value(self) -> any: Button value. Pass a new value to update.","title":"value"},{"location":"radiogroup/","text":"class RadioGroup Inherits from: Widget Radio Buttons Group Widget. Signature __init__(self, buttons: list, *args, **kwargs) -> None: Class constructor. :param buttons: List with all RadioButton's configured to display. Properties buttons python buttons(self) -> list: List with all RadioButton's configured to display.","title":"RadioGroup"},{"location":"radiogroup/#_1","text":"","title":""},{"location":"radiogroup/#class-radiogroup","text":"","title":"class RadioGroup"},{"location":"radiogroup/#signature","text":"__init__(self, buttons: list, *args, **kwargs) -> None: Class constructor. :param buttons: List with all RadioButton's configured to display.","title":"Signature"},{"location":"radiogroup/#properties","text":"","title":"Properties"},{"location":"radiogroup/#buttons","text":"python buttons(self) -> list: List with all RadioButton's configured to display.","title":"buttons"},{"location":"signal/","text":"class Signal Inherits from: object Signal object. Signature __init__(self): Class constructor. Signals an event: MyObj: obj_signal = Signal() Properties _callback python _callback(self) -> callable: Methods value python value(self, value: any) -> None: Signal value. my_signal = self.obj_signal signal_value = my_signal.value self.my_signal.connect(lambda: print(signal_value)) disconnect python disconnect(self, callback: callable = None) -> None: Function to be disconnected. my_obj.obj_signal.disconnect(self.my_function) :param callback: Function to be disconnect. emit python emit(self) -> None: Send this signal. This method should be executed when you need to send the signal.","title":"Signal"},{"location":"signal/#_1","text":"","title":""},{"location":"signal/#class-signal","text":"","title":"class Signal"},{"location":"signal/#signature","text":"__init__(self): Class constructor. Signals an event: MyObj: obj_signal = Signal()","title":"Signature"},{"location":"signal/#properties","text":"","title":"Properties"},{"location":"signal/#_callback","text":"python _callback(self) -> callable:","title":"_callback"},{"location":"signal/#methods","text":"","title":"Methods"},{"location":"signal/#value","text":"python value(self, value: any) -> None: Signal value. my_signal = self.obj_signal signal_value = my_signal.value self.my_signal.connect(lambda: print(signal_value))","title":"value"},{"location":"signal/#disconnect","text":"python disconnect(self, callback: callable = None) -> None: Function to be disconnected. my_obj.obj_signal.disconnect(self.my_function) :param callback: Function to be disconnect.","title":"disconnect"},{"location":"signal/#emit","text":"python emit(self) -> None: Send this signal. This method should be executed when you need to send the signal.","title":"emit"},{"location":"svgwidget/","text":"class SvgWidget Inherits from: Widget Svg Widget. Signature __init__(self, path: str = None, *args, **kwargs) -> None: Class constructor. Properties state python state(self) -> str: ...","title":"SvgWidget"},{"location":"svgwidget/#_1","text":"","title":""},{"location":"svgwidget/#class-svgwidget","text":"","title":"class SvgWidget"},{"location":"svgwidget/#signature","text":"__init__(self, path: str = None, *args, **kwargs) -> None: Class constructor.","title":"Signature"},{"location":"svgwidget/#properties","text":"","title":"Properties"},{"location":"svgwidget/#state","text":"python state(self) -> str: ...","title":"state"},{"location":"switchbutton/","text":"class SwitchButton Inherits from: Widget Switch Button Widget. Signature __init__( self, text: str = None, value: any = None, selected: bool = False, orientation: Orientation = Orientation.HORIZONTAL, *args, **kwargs) -> None: Class constructor. :param text: SwitchButton text label. :param selected: True to start already selected. :param value: Value of any type to capture as an identifier. Properties text python text(self) -> str: Button text. Pass a new string to update the text. selected python selected(self) -> bool: If Widget is selected. Use True or False to select or deselect the widget. value python value(self) -> any: Button value. Pass a new value to update.","title":"SwitchButton"},{"location":"switchbutton/#_1","text":"","title":""},{"location":"switchbutton/#class-switchbutton","text":"","title":"class SwitchButton"},{"location":"switchbutton/#signature","text":"__init__( self, text: str = None, value: any = None, selected: bool = False, orientation: Orientation = Orientation.HORIZONTAL, *args, **kwargs) -> None: Class constructor. :param text: SwitchButton text label. :param selected: True to start already selected. :param value: Value of any type to capture as an identifier.","title":"Signature"},{"location":"switchbutton/#properties","text":"","title":"Properties"},{"location":"switchbutton/#text","text":"python text(self) -> str: Button text. Pass a new string to update the text.","title":"text"},{"location":"switchbutton/#selected","text":"python selected(self) -> bool: If Widget is selected. Use True or False to select or deselect the widget.","title":"selected"},{"location":"switchbutton/#value","text":"python value(self) -> any: Button value. Pass a new value to update.","title":"value"},{"location":"switchgroup/","text":"class SwitchGroup Inherits from: CheckGroup Switch Buttons Group Widget. Signature __init__(self, *args, **kwargs) -> None:","title":"SwitchGroup"},{"location":"switchgroup/#_1","text":"","title":""},{"location":"switchgroup/#class-switchgroup","text":"","title":"class SwitchGroup"},{"location":"switchgroup/#signature","text":"__init__(self, *args, **kwargs) -> None:","title":"Signature"},{"location":"toolbutton/","text":"class ToolButton Inherits from: Widget Tool Button Widget. Signature __init__(self, icon: str | Icon, *args, **kwargs) -> None: Class constructor. Properties selectable python selectable(self) -> bool: ... selected python selected(self) -> bool: ...","title":"ToolButton"},{"location":"toolbutton/#_1","text":"","title":""},{"location":"toolbutton/#class-toolbutton","text":"","title":"class ToolButton"},{"location":"toolbutton/#signature","text":"__init__(self, icon: str | Icon, *args, **kwargs) -> None: Class constructor.","title":"Signature"},{"location":"toolbutton/#properties","text":"","title":"Properties"},{"location":"toolbutton/#selectable","text":"python selectable(self) -> bool: ...","title":"selectable"},{"location":"toolbutton/#selected","text":"python selected(self) -> bool: ...","title":"selected"},{"location":"widget/","text":"class CoreWidget Inherits from: QtWidgets.QFrame Core Widget. Signature __init__(self, *args, **kwargs): Class constructor. class Widget Inherits from: object Widget. Tip: The base widget is an empty object, with no margins or spacing, and is visually imperceptible, as it does not take up a single pixel. Adding height, width or background color will help to make it noticeable. Signature __init__( self, main_parent = None, orientation: Orientation = Orientation.VERTICAL, *args, **kwargs) -> None: Class constructor. :main_parent: MainFrame object Properties accent python accent(self) -> str: ... align python align(self) -> Align: Align enum. Sets the Box alignment. enabled python enabled(self) -> bool: Enables the Widget. When False, the Widget is inactive both in appearance and in the Event.MOUSE_PRESS and Event.MOUSE_RELEASE events. height python height(self) -> int: Returns the height of the Widget. Pass a new integer value to update the height. margin python margin(self) -> tuple: Utility to set widget margins using a simple int tuple. Will affect all widget states, such as pressed, hover and inactive. Note: The Box's 'spacing' property takes precedence over the widget's margins, unless the widget is the only one isolated within a Box. If the Box is vertical, then only the side margins of the widgets will be respected. The Box does not activate the spacing with a single isolated widget. max_height python max_height(self) -> int: Returns the Widget maximum height. Pass a new integer value to update the maximum height the Widget can have. max_width python max_width(self) -> int: Returns the Widget maximum width. Pass a new integer value to update the maximum width the Widget can have. min_height python min_height(self) -> int: Returns the Widget minimum height. Pass a new integer value to update the minimum height the Widget can have. min_width python min_width(self) -> int: Returns the Widget minimum width. Pass a new integer value to update the minimum width the Widget can have. spacing python spacing(self) -> int: The space between widgets inside the Widget box. This property takes precedence over the margins of the widgets that are added (add_widgets), so if the Box is vertical, then only the side margins of the widgets will be respected. The Box does not activate the spacing with a single isolated widget. state python state(self) -> str: ... style python style(self) -> str: Style as dict. The style is a 'dict' that goes back to the style INI file. The contents of this file are something like: [Widget] background=rgba(200, 0, 0, 1.00) margin=5px 5px 5px 5px So the dictionary will be: {'[Widget]': { 'background': 'rgba(200, 0, 0, 1.00)', 'margin': '5px 5px 5px 5px',} } Simply changing the existing dictionary does not update the style, the property actually needs to be updated with a new dictionary: new_style = my_widget.style new_style['[Widget]']['margin'] = '05px 05px 05px 05px' my_widget.style = new_style Shortened: my_widget.style['[Widget]']['margin'] = '05px 05px 05px 05px' my_widget.style = my_widget.style Note: The Box's 'spacing' property takes precedence over the widget's margins, unless the widget is the only one isolated within a Box. style_class python style_class(self) -> str | None: Changes the style to that of the desired class. Use appropriate generic classes, such as 'Success', 'Danger', 'Warning' and 'Accent'. my_button.style_class = 'Danger' Use None to reset. The style class will only be changed if the Widget already contains a _main_parent (The 'add' method automatically sets the _main_parent). style_id python style_id(self) -> str: Style ID. An ID allows you to define a unique style that does not distort parent objects of the same type that inherit from the class. Send a string with a unique ID to set the style for this Widget only. visible python visible(self) -> bool: Widget Visibility. Qt has minor issues when calculating pixels to render areas that are repeatedly hidden and visible, so clearly define the sizes and spacing to avoid minor visual discomforts. width python width(self) -> int: Returns the Widget width. Pass a new integer value to update the width. _main_parent python _main_parent(self): Main frame of the application. Use only to access properties and methods of the Main Frame, defining a new frame will break the application. _obj python _obj(self): Direct access to Qt classes. Warning: Direct access is discouraged and may break the project. This access is considered a hacking for complex Qt implementations, and should only be used for testing and analysis purposes. Methods events_available_for_signal python events_available_for_signal(self) -> str: String with all available events. add python add(self, item: Widget | Box, index: int = -1) -> Widget | Box: Inserts a Widget or a Box. Returns the reference to the added item. :param item: It can be a Widget (Widget, Label, Button...) or a Box. :param index: Index number where the item should be added (Default is -1) items python items(self) -> list: List with added widgets. remove python remove(self, item: Widget | Box) -> None: Removes a Widget or a Box. This only removes the widget, but does not delete it. The variable referring to it still works and can be added again later. To completely delete the widget from the variable, use the 'delete()' method. :param item: A Widget (Widget, Label, Button...) or a Box. move python move(self, x: int, y: int) -> None: Move the Widget. The X and Y positions are relative to the main parent. :param x: Horizontal position relative to the main parent. :param y: Vertical position relative to the main parent. signal python signal(self, event: Event) -> Signal: Event Signals. Signals are connections to events. When an event such as a mouse click (Event.MOUSE_PRESS) or other event occurs, a signal is sent. The signal can be assigned a function to be executed when the signal is sent. Use the 'events_available_for_signal()' method to see all available events. :param event: Event enumeration (Enum) corresponding to the requested event, such as Event.HOVER_ENTER. See: events_available_for_signal().","title":"Widget"},{"location":"widget/#_1","text":"","title":""},{"location":"widget/#class-corewidget","text":"","title":"class CoreWidget"},{"location":"widget/#signature","text":"__init__(self, *args, **kwargs): Class constructor.","title":"Signature"},{"location":"widget/#class-widget","text":"","title":"class Widget"},{"location":"widget/#signature_1","text":"__init__( self, main_parent = None, orientation: Orientation = Orientation.VERTICAL, *args, **kwargs) -> None: Class constructor. :main_parent: MainFrame object","title":"Signature"},{"location":"widget/#properties","text":"","title":"Properties"},{"location":"widget/#accent","text":"python accent(self) -> str: ...","title":"accent"},{"location":"widget/#align","text":"python align(self) -> Align: Align enum. Sets the Box alignment.","title":"align"},{"location":"widget/#enabled","text":"python enabled(self) -> bool: Enables the Widget. When False, the Widget is inactive both in appearance and in the Event.MOUSE_PRESS and Event.MOUSE_RELEASE events.","title":"enabled"},{"location":"widget/#height","text":"python height(self) -> int: Returns the height of the Widget. Pass a new integer value to update the height.","title":"height"},{"location":"widget/#margin","text":"python margin(self) -> tuple: Utility to set widget margins using a simple int tuple. Will affect all widget states, such as pressed, hover and inactive. Note: The Box's 'spacing' property takes precedence over the widget's margins, unless the widget is the only one isolated within a Box. If the Box is vertical, then only the side margins of the widgets will be respected. The Box does not activate the spacing with a single isolated widget.","title":"margin"},{"location":"widget/#max_height","text":"python max_height(self) -> int: Returns the Widget maximum height. Pass a new integer value to update the maximum height the Widget can have.","title":"max_height"},{"location":"widget/#max_width","text":"python max_width(self) -> int: Returns the Widget maximum width. Pass a new integer value to update the maximum width the Widget can have.","title":"max_width"},{"location":"widget/#min_height","text":"python min_height(self) -> int: Returns the Widget minimum height. Pass a new integer value to update the minimum height the Widget can have.","title":"min_height"},{"location":"widget/#min_width","text":"python min_width(self) -> int: Returns the Widget minimum width. Pass a new integer value to update the minimum width the Widget can have.","title":"min_width"},{"location":"widget/#spacing","text":"python spacing(self) -> int: The space between widgets inside the Widget box. This property takes precedence over the margins of the widgets that are added (add_widgets), so if the Box is vertical, then only the side margins of the widgets will be respected. The Box does not activate the spacing with a single isolated widget.","title":"spacing"},{"location":"widget/#state","text":"python state(self) -> str: ...","title":"state"},{"location":"widget/#style","text":"python style(self) -> str: Style as dict. The style is a 'dict' that goes back to the style INI file. The contents of this file are something like: [Widget] background=rgba(200, 0, 0, 1.00) margin=5px 5px 5px 5px So the dictionary will be: {'[Widget]': { 'background': 'rgba(200, 0, 0, 1.00)', 'margin': '5px 5px 5px 5px',} } Simply changing the existing dictionary does not update the style, the property actually needs to be updated with a new dictionary: new_style = my_widget.style new_style['[Widget]']['margin'] = '05px 05px 05px 05px' my_widget.style = new_style Shortened: my_widget.style['[Widget]']['margin'] = '05px 05px 05px 05px' my_widget.style = my_widget.style Note: The Box's 'spacing' property takes precedence over the widget's margins, unless the widget is the only one isolated within a Box.","title":"style"},{"location":"widget/#style_class","text":"python style_class(self) -> str | None: Changes the style to that of the desired class. Use appropriate generic classes, such as 'Success', 'Danger', 'Warning' and 'Accent'. my_button.style_class = 'Danger' Use None to reset. The style class will only be changed if the Widget already contains a _main_parent (The 'add' method automatically sets the _main_parent).","title":"style_class"},{"location":"widget/#style_id","text":"python style_id(self) -> str: Style ID. An ID allows you to define a unique style that does not distort parent objects of the same type that inherit from the class. Send a string with a unique ID to set the style for this Widget only.","title":"style_id"},{"location":"widget/#visible","text":"python visible(self) -> bool: Widget Visibility. Qt has minor issues when calculating pixels to render areas that are repeatedly hidden and visible, so clearly define the sizes and spacing to avoid minor visual discomforts.","title":"visible"},{"location":"widget/#width","text":"python width(self) -> int: Returns the Widget width. Pass a new integer value to update the width.","title":"width"},{"location":"widget/#_main_parent","text":"python _main_parent(self): Main frame of the application. Use only to access properties and methods of the Main Frame, defining a new frame will break the application.","title":"_main_parent"},{"location":"widget/#_obj","text":"python _obj(self): Direct access to Qt classes. Warning: Direct access is discouraged and may break the project. This access is considered a hacking for complex Qt implementations, and should only be used for testing and analysis purposes.","title":"_obj"},{"location":"widget/#methods","text":"","title":"Methods"},{"location":"widget/#events_available_for_signal","text":"python events_available_for_signal(self) -> str: String with all available events.","title":"events_available_for_signal"},{"location":"widget/#add","text":"python add(self, item: Widget | Box, index: int = -1) -> Widget | Box: Inserts a Widget or a Box. Returns the reference to the added item. :param item: It can be a Widget (Widget, Label, Button...) or a Box. :param index: Index number where the item should be added (Default is -1)","title":"add"},{"location":"widget/#items","text":"python items(self) -> list: List with added widgets.","title":"items"},{"location":"widget/#remove","text":"python remove(self, item: Widget | Box) -> None: Removes a Widget or a Box. This only removes the widget, but does not delete it. The variable referring to it still works and can be added again later. To completely delete the widget from the variable, use the 'delete()' method. :param item: A Widget (Widget, Label, Button...) or a Box.","title":"remove"},{"location":"widget/#move","text":"python move(self, x: int, y: int) -> None: Move the Widget. The X and Y positions are relative to the main parent. :param x: Horizontal position relative to the main parent. :param y: Vertical position relative to the main parent.","title":"move"},{"location":"widget/#signal","text":"python signal(self, event: Event) -> Signal: Event Signals. Signals are connections to events. When an event such as a mouse click (Event.MOUSE_PRESS) or other event occurs, a signal is sent. The signal can be assigned a function to be executed when the signal is sent. Use the 'events_available_for_signal()' method to see all available events. :param event: Event enumeration (Enum) corresponding to the requested event, such as Event.HOVER_ENTER. See: events_available_for_signal().","title":"signal"},{"location":"widgetbase/","text":"class CoreWidgetBase Inherits from: QtWidgets.QWidget Core Widget base. Signature __init__(self, *args, **kwargs): Class constructor. class WidgetBase Inherits from: Widget Widget base. Signature __init__(self, *args, **kwargs) -> None: Class constructor.","title":"WidgetBase"},{"location":"widgetbase/#_1","text":"","title":""},{"location":"widgetbase/#class-corewidgetbase","text":"","title":"class CoreWidgetBase"},{"location":"widgetbase/#signature","text":"__init__(self, *args, **kwargs): Class constructor.","title":"Signature"},{"location":"widgetbase/#class-widgetbase","text":"","title":"class WidgetBase"},{"location":"widgetbase/#signature_1","text":"__init__(self, *args, **kwargs) -> None: Class constructor.","title":"Signature"}]}